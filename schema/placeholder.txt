 {
     "placeholders": [
         {
             "name": "[[totalprice]]",
             "scope": "item",
             "razor": "totalprice",
             "code": "var totalpricedouble = 0.00; totalpricedouble = @product.Price * @product.Quantity; var totalprice = Math.Round(totalpricedouble, 2).ToString(\"0.00\");"
         },
         {
             "name": "[[webview]]",
             "scope": "none",
             "legacy": true
         },
         {
             "name": "[[unsubscribe]]",
             "scope": "none",
             "legacy": true
         },
         {
             "name": "[[customername]]",
             "scope": "session",
             "razor": "salutation",
             "code": "var salutation = \"Customer,\"; if(Model.Customer != null && string.IsNullOrEmpty(Model.Customer.FirstName) == false) { salutation = String.Format(\"{0},\", Model.Customer.FirstName); }"
         },
         {
             "name": "[[totalvalue]]",
             "scope": "session",
             "razor": "Model.BasketValue"

         },
         {
             "name": "[[itemimage]]",
             "scope": "item",
             "razor": "product.ImageUrl", 
             "prepend": { "id" : "imageReplaceUrl", "value" : "value" }

        },
         {
             "name": "[[itemname]]",
             "scope": "item",
             "razor": "product.Name"

         },
          {
              "name": "[[itemvalue]]",
              "scope": "item",
              "razor": "product.Price"

          },
          {
              "name": "[[itemquantity]]",
              "scope": "item",
              "razor": "product.Quantity"

          },
           {
               "name": "[[itemquantity1]]",
               "scope": "item",
               "razor": "product.Quantity"

           },
           {
               "name": "[[itemcurrency]]",
               "scope": "session",
               "razor": "itemcurrency",
               "code": "var itemcurrency = @Model.CurrencyCode;",
               "comment": "this is the apparent standard placeholder for currency, this still needs to be tested and clarified, if all fails, use session:cur and add it manually", 
               "override": "cur", 
               "overridecode": "var cur = @TryGetSessionField(\"cur\");" 

           },
             {
                 "name": "[[currencysymbol]]",
                 "scope": "session",
                 "razor": "currencysymbol",
                 "code": "var currencysymbol = @Model.CurrencyCode;",
                 "comment": "this is the apparent standard placeholder for currency, this still needs to be tested and clarified, if all fails, use session:cur and add it manually", 
                 "override": "cur", 
                 "overridecode": "var cur = @TryGetSessionField(\"cur\");" 
             },
           {
               "name": "[[customfield1]]",
               "scope": "item",
               "razor": "customfield1",
               "code": "var customfield1 = @TryGetItemField(@product, \"f1\");"

           },
            {
                       "name": "[[numitems]]",
                       "scope": "session", 
                       "code": "var numitems = String.Format(\"{0}\", Model.Products.Sum(p => p.Quantity));",
                       "razor": "numitems"
            }, 
            {
                "name": "[[customeremail]]", 
                "scope": "session", 
                "code": "var email = @Model.Customer.Email;",
                "razor": "email"
            }, 
            {
                "name": "[[itemid]]", 
                "scope": "item", 
                "code": "var itemid = @product.ProductId;",
                "razor": "itemid"
            }


    ]
}